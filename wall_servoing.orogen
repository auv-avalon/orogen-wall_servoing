name "wall_servoing"

import_types_from "base"
import_types_from "SonarDetectorTaskTypes.hpp"
using_library "sonar_detectors"

task_context "SonarServoing" do
    # controller settings
    property("wall_distance", 'double', 2.0).
        doc("reference distance to wall")
    property("fixed_depth", 'double', -1.0).
        doc("reference depth")
    property("servoing_speed", "double", 0.0).
        doc("set distance for the y axis, witch will result in a certain speed")
    property("exploration_speed", "double", 0.2).
        doc("the exploration will simply drive forward in the origin serviong direction")
end

task_context "SingleSonarServoing" do
    subclasses "SonarServoing"

    # controller settings
    property("servoing_wall_direction", "double", 0.0).
        doc("in this direction the wall be if the wall servoing is performed, default is 0 than the wall is in front")
    property("initial_wall_direction", "double", 0.0).
        doc("the initial heading of avalon to the wall, default is 0 than the wall is in front")
    property("minimal_wall_distance", "double", 0.75).
        doc("the auv will move away from the wall if the wall is to near")

    # wall estimation settings
    property("left_opening_angle","double", 0.0).
        doc("opening angle to the left of the supposed wall direction, always positive")
    property("right_opening_angle","double", 0.0).
        doc("opening angle to the right of the supposed wall direction, always positive")
    property("wall_estimation_ransac_threshold","double", 0.5).
        doc("maximal inlier distance to the model")
    property("wall_estimation_ransac_min_inliers","double", 0.7).
        doc("minimum count inliers of the point cloud in percent to be a valid model")
    property("fading_out_factor","double", 0.028).
        doc("fading out factor for the features in center wall estimator")
    property("dbscan_epsilon","double", 0.15).
        doc("epsilon in one meter distance of dbscan algorithm. epsilon will be increased linear by the distance of features").
        doc("the default value 0.15 is abaut 1.75 times the angular resolution (default 0.08726646259971647 ~ 5Â°)")
    property("wait_until_start","double", 3.0).
        doc("wait time in seconds until the wall servoing will start, this helps to get better data from the estimator")
    property("use_motion_model","bool", false).
	doc("use the motion model, to estimate the wall distance between sonar-scans").
	doc("By using this, the sonar-data is only used, when a scan is complete")
    property("check_distance_threshold","double", 1.0).
	doc("The distance difference between two samples, at which a error is detected")

    input_port('sonarbeam_feature', '/base/samples/LaserScan').
        needs_reliable_connection.
        doc("newest sonar feature")
    input_port "orientation_sample", 'base::samples::RigidBodyState'
    input_port('position_sample', 'base/samples/RigidBodyState').
	doc("position samples, used to correct the wall-distance between laser scans")

    output_port('position_command', '/base/AUVPositionCommand').
        doc("relativ target position and heading")

    # debug
    property("enable_debug_output", 'bool', false).
        doc("enables the debug output port")
    output_port('wall_servoing_debug', 'sonar_detectors/WallServoingDebugData').
        doc("estimated wall data, the pointcloud, the wall, the distance, the time")

    runtime_states :WALL_SERVOING, :SEARCHING_WALL, :CHECKING_WALL, :DETECTED_CORNER, :LOST_WALL, :ORIGIN_ALIGNMENT, :ALIGNMENT_COMPLETE
    error_states :MISCONFIGURATION

    port_driven "sonarbeam_feature"
end

task_context "DualSonarServoing" do
    subclasses "SonarServoing"

    # wall estimation settings
    property("opening_angle","double", 0.09).
        doc("opening angle for each of the three observed angular ranges")

    input_port('sonarbeam_feature_front', '/base/samples/LaserScan').
        needs_reliable_connection.
        doc("newest sonar feature")
    input_port('sonarbeam_feature_rear', '/base/samples/LaserScan').
        needs_reliable_connection.
        doc("newest sonar feature")
    input_port "orientation_sample", 'base::samples::RigidBodyState'

    output_port('position_command', '/base/AUVPositionCommand').
        doc("relativ target position and heading")

    # debug
    property("enable_debug_output", 'bool', false).
        doc("enables the debug output port")
    output_port('wall_servoing_debug', 'sonar_detectors/DualWallServoingDebugData').
        doc("estimated wall data, the pointcloud, the wall, the distance, the time")

    runtime_states :WALL_SERVOING, :SEARCHING_WALL, :DETECTED_CORNER
    error_states :MISCONFIGURATION

    port_driven "sonarbeam_feature_front", "sonarbeam_feature_rear"
end


deployment "wall_servoing_test" do
    do_not_install
    task("wall_servoing", "SingleSonarServoing")
    task("dual_wall_servoing", "DualSonarServoing")
end
